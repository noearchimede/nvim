# NoÃ¨ Pezzoli - LaTeX editing snippets
# Originally a copy of Gilles Castel's https://github.com/gillescastel/latex-snippets/blob/master/tex.snippets,
# then adapted to my needs.


snippet vvv "Volts" A
\SI{$1}{\volt}$0
endsnippet

global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]]
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

snippet template "Basic template" b
\documentclass[12pt]{article}

\usepackage[utf8]{inputenc}
\usepackage[paper=a4paper]{geometry}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage[hidelinks]{hyperref}
\usepackage{graphicx}
\usepackage{subcaption}
\usepackage[font=small,labelfont=bf]{caption}
\usepackage[separate-uncertainty=true]{siunitx}

\usepackage{parskip}
\setlength{\parindent}{0pt}

\renewcommand{\phi}{\varphi}
\renewcommand{\theta}{\vartheta}
\renewcommand{\epsilon}{\varepsilon}

% Bibliography
\usepackage[style=numeric]{biblatex}
\addbibresource{bibliography.bib}

\title{}
\author{}
\date{}


\begin{document}

\maketitle

\begin{abstract}
\end{abstract}

\tableofcontents
\newpage



\end{document}
endsnippet

snippet beg "begin{} / end{}" b
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet table "Table environment" b
\begin{table}${1:[htpb]}
	\centering
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
	\caption{${2:caption}}
	\label{tab:${3:label}}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}${1:[]}
	\centering
	\includegraphics[width=\textwidth]{$2}
	\caption{$4}
	\label{fig:$3}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet pack "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
\] $0
endsnippet

snippet equation "Equation" b
\begin{equation}
	${2}
	\label{eq:$1}
\end{equation}
endsnippet

snippet align "Align" b
\begin{align}
	${2}
	\label{eq:$1}
\end{align}
endsnippet

snippet *equation "Equation" b
\begin{equation*}
	${1}
\end{equation*}
endsnippet

snippet *align "Align" b
\begin{align*}
	${1}
\end{align*}
endsnippet

snippet // "Simple fraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet frac "Fraction" wA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)//' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)//' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet part "d/dx" w
\frac{\partial $1}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sqrt "\sqrt{}" A
\sqrt{${1:${VISUAL}}} $0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet EE "exists" A
\exists 
endsnippet

context "math()"
snippet AA "forall" A
\forall 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 300
context "math()"
snippet int "integral" w
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rw
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rw
\\`!p snip.rv = match.group(1)`
endsnippet


priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet


context "math()"
snippet set "set" w
\\{$1\\} $0
endsnippet


context "math()"
snippet tt "text" i
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet '(?<!\\$)([0-9].[0-9]*)e' "Scientific notation" rw
`!p snip.rv = match.group(1)` \cdot 10^{$1} $0 
endsnippet








# vim:ft=snippets
