"                        ┌──────────────────────────┐
"                        │ Keyboard Standardization │
"                        └──────────────────────────┘

" This simple plugin is a tool to remap some important Keys for Normal mode
" (such as colon, quotes, square brackets, etc) to a standard position
" regardless of the actual keyboard layout.
"
" An ISO qwertz (or qwerty) keyboard layout is assumed.


" – Settings –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

" The two variables below define a default keyboard layout and remapping
" targets. Define the variables
"  - g:standardize_keyboard_schematic
"  - g:standardize_keyboard_target_list
"  - g:standardize_keyboard_mode
" in a similar way in a configuration file to overwrite these defaults.


" Schematic of the keyboard that will guide the user during the remapping
" operation. Has no direct effect on the mappings other than indicate which
" keys should be typed.
" IMPORTANT: every character displayed on this schematic must appear only once.
" Also remember that some characters must be escaped.
let s:default_schematic = [ 
            \ "┌────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬──────┐",
            \ "│    │  1  │  2  │  3  │  4  │  5  │  6  │  7  │  8  │  9  │  0  │     │     │      │",
            \ "│    │     │     │     │     │     │     │     │     │     │     │     │     │      │",
            \ "├────┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬────┤",
            \ "│      │  q  │  w  │  e  │  r  │  t  │  z  │  u  │  i  │  o  │  p  │     │     │    │",
            \ "│      │     │     │     │     │     │     │     │     │     │     │     │     │    │",
            \ "├──────┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┐  │",
            \ "│        │  a  │  s  │  d  │  f  │  g  │  h  │  j  │  k  │  l  │  :  │     │     │  │",
            \ "│        │     │     │     │     │     │     │     │     │     │     │     │     │  │",
            \ "├─────┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴─────┴──┤",
            \ "│     │     │  y  │  x  │  c  │  v  │  b  │  n  │  m  │     │     │     │           │",
            \ "│     │     │     │     │     │     │     │     │     │     │     │     │           │",
            \ "├────┬┴────┬┴────┬┴────┬┴─────┴─────┴─────┴─────┴─────┴┬────┴┬────┴┬────┴┬────┬─────┤",
            \ "│    │     │     │     │                               │     │     │     │    │     │",
            \ "│    │     │     │     │                               │     │     │     │    │     │",
            \ "└────┴─────┴─────┴─────┴───────────────────────────────┴─────┴─────┴─────┴────┴─────┘"]

" List of keys that will be targeted for remapping by the remapping function.
" This list may contain any arbitrary selection of useful keys as well as all
" keys on the keyboard.
" Important: all characters shown here must also appear in the schematic above
" Note: if empty all characters in the chart above will be used
let s:default_target_list = []

" Type of mappings created by this script. Valid values are:
"  - langmap:  use the 'langmap' option
"  - map:      use 'map' commands
let s:default_mode = 'langmap'


" ––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––


" – Interface ––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

" these can be used by the user
command! StandardizeKeyboard :call s:standardizeKeyboard()
command! StandardizeKeyboardReset :call s:standardizeKeyboardRemove()

" these may be used in the configuration just after the definition of setting
" variables
function! StandardizeKeyboardCheckSettingsVariables()
    call s:get_isok_schematic_target()
endfunctio


" – Implementation –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––


" Prompt the user to press some keys important in Normal mode to remap them to
" the expected characters.
function! s:standardizeKeyboard()

    " check that save path variable exists
    if !exists('g:vimrc_keyboard_remappings_path')
        redraw
        echo "Error: 'g:vimrc_keyboard_remappings_path' is not defined"
        echo "It should contain the name for the configuration file generated by this function."
        return
    endif

    let mode = exists('g:standardize_keyboard_mode') ? g:standardize_keyboard_mode : s:default_mode    
    if index(['langmap', 'map'], mode) < 0
        redraw
        echo "Error: 'g:standardize_keyboard_mode' has an unrecognized value"
        return
    endif

    " get settings variables
    let isok_schematic_targets = s:get_isok_schematic_target()
    if isok_schematic_targets[0] == 0
        echo "Error: the settings variables are not defined correctly"
        return
    endif
    let keyboard_schematic = isok_schematic_targets[1]
    let target_list = isok_schematic_targets[2]

    " show a copy of the keyboard schematic in a new tab
    tabnew
    let target_layout_winid = win_getid()
    set textwidth=88
    set nowrap
    set buftype=nowrite " this buffer will not be saved
    call append(0, keyboard_schematic)

    " show a second copy of the keyboard schematic in a new split and clear it,
    " as this copy will be populated with the keys entered by the user
    new
    let source_layout_winid = win_getid()
    set textwidth=88
    set nowrap
    set buftype=nowrite " this buffer will be saved only if successful
    call append(0, keyboard_schematic)
    %substitute/\([^ ─│┌┐└┘├┤┬┴]\)/□/g
    " remove \([^ ─│┌┐└┘├┤┬┴]\) form the search register to avoid highlighting
    let @/ = ''

    " create a buffer to display some instructions for the user
    new
    let info_winid = win_getid()
    set textwidth=88
    set nowrap
    set buftype=nowrite " this buffer will not be saved
    wincmd J
    resize 10
    call append(0, ["The first keyboard schematic above shows the desired keyboard layout.",
                \ "The second one will show the usual function of the keys that will be remapped.",
                \ "Note that if two charactes are shown in one key the one on the bottom implies <shift>.",
                \ "",
                \ "Type the highlighted key to remap it (you may also use a different key at your discretion), or:",
                \ "  - <Tab> to skip the current key,",
                \ "  - <Backspace> to go back to the previous key,",
                \ "  - <Ctrl-C> to interrupt.",
                \ "Note that there is no protection against typing characters that for some reason can not be used in the mappings."])

    try        
        " iterate trough all characters that must be remapped
        let source_list = []
        let target_index = 0
        while target_index < len(target_list)
            let target = target_list[target_index]

            " Get the position of the current key in the diagrams
            call win_gotoid(target_layout_winid)
            normal gg0
            call search('\V' . escape(target, '\'))
            let target_key_pos = getcursorcharpos()

            " write full block characters (█) around the current key
            normal 2hr█4lr█2h
            call win_gotoid(source_layout_winid)
            call setcharpos('.', target_key_pos)
            normal 2hr█4lr█2h

            " prompt the user to select a character
            redraw!
            echo "Type the key for <" . target . ">"
            let inserted_char_code = getchar()
            if (inserted_char_code == "\<BS>")
                " Backspace was typed -> go back to previosu character if possible
                if (target_index == 0)
                    echo "Already at first key in sequence. Use Ctrl-C to interrupt remapping operation"
                else
                    let target_index -= 1
                endif
                " set a space as source char simply to clear the schematic. It will not be saved.
                let source_char = ' '
            else
                " Another character was typed -> remap to that character and continue
                if (inserted_char_code == 9)
                    " Tab was typed -> set source char to the target one so that it will
                    " not be remapped
                    let source_char = target
                else
                    let source_char = nr2char(inserted_char_code)
                endif
                if len(source_list) == target_index
                    call add(source_list, source_char)
                else
                    let source_list[target_index] = source_char
                endif
                " allow loop to continue
                let target_index += 1
            endif

            " remove the full block characters
            call win_gotoid(target_layout_winid)
            call setcharpos('.', target_key_pos)
            normal 2hr 4lr 2h
            call win_gotoid(source_layout_winid)
            call setcharpos('.', target_key_pos)
            normal 2hr 4lr 2h
            " enter the source character in the empty schematic 
            call win_gotoid(source_layout_winid)
            if (source_char != target)
                exec 'normal r' . source_char
            else
                normal r░
            endif

        endwhile
        redraw!

        if len(target_list) != len(source_list)
            call win_gotoid(source_layout_winid)
            bdelete
            redraw!
            echo "Operation was interrupted"
            return
        endif

        call win_gotoid(target_layout_winid)
        bdelete
        call win_gotoid(source_layout_winid)
        set filetype=vim
        set tw=88
        " Title for second table
        call append(0, ["", "", "Remapped keys (here the original character is shown):"])
        " insert the original schamatic above this one
        call append(0, keyboard_schematic)
        " Title for first table
        call append(0, ["", "", "Resulting keyboard layout:"])
        " Title and description of file
        call append(0, ["This file was generated automatically by the StandardizeKeyboard() function",
                    \ "",
                    \"This file defines mappings to move keys useful in Normal mode into a",
                    \"standard position.",
                    \"",
                    \"The schematics below refer to the intended positions of these keys. However",
                    \"Vim has no way of knowing which key was typed, it only sees the characters.",
                    \"If different keys were used during the execution of the function that",
                    \"generated this file the schamtics should be changed accordingly by hand.",
                    \"A '░' symbol indicates in the second schematic indicates that the key was",
                    \"either already in the correct position or was skipped during the interactive",
                    \"remapping operation.",
                    \"",
                    \"The mappings defined here do not apply to Insert mode, but apply to all",
                    \"other modes (including command-line)."])
        " comment out everything
        %substitute/^/" /

        " set langremap option
        if mode == 'langmap'
            redraw
            echo "Would you like to set 'langremap'? (the alternative is nolangremap) [y/–]\nYou can change this later manually in the output file\n"
            while 1 
                let use_langmap_answ = nr2char(getchar()) 
                if (use_langmap_answ == 'y' || use_langmap_answ == 'n') | break | endif
                echo "Answer with 'y' or 'n'"
            endwhile
            call append(line('$'), ["", "",
                        \ "\" 'nolangremap' revents 'langmap' from applying to characters resulting form a mapping",
                        \ "\" It should prevent langmap from breaking mappings, but could itself break other mappings.",
                        \ (use_langmap_answ == 'y' ? "set langremap" : "set nolangremap"),
                        \ "",
                        \ "\" Use 'langmap' to remap keys to the standard layout shown above",
                        \ "set langmap="])
        endif

        " write mappings
        let index = 0
        while index < len(target_list)
            if (source_list[index] != target_list[index])
                    if mode == 'langmap'
                    call append(line('$'), "set langmap+=" .
                                \ escape(escape(source_list[index], ';,"|\'), '\') .
                                \ escape(escape(target_list[index], ';,"|\'), '\'))
                elseif mode == 'map'
                    call append(line('$'), "map " .
                                \ source_list[index] . ' ' . target_list[index])
                endif
            endif
            let index += 1
        endwhile

        " ESC remapping
        redraw
        echo "Would you like to define a mapping for ESC? [y/n]"
        while 1 
            let map_esc_answ = nr2char(getchar()) 
            if (map_esc_answ  == 'y' || map_esc_answ == 'n') | break | endif
            echo "Answer with 'y' or 'n'"
        endwhile
        if map_esc_answ == 'y'
            let map_esc_to = input("Type the character(s) that should be mapped to ESC: ")
            call append(line('$'), ["", "",
                        \ "\" Remap ESC to " . map_esc_to,
                        \ "inoremap " . map_esc_to . " <esc>",
                        \ "vnoremap " . map_esc_to . " <esc>",
                        \ "cnoremap " . map_esc_to . " <esc>"])
        endif

        " fix indentation (appeared to be messed up in tests)
        normal ggVG<<<<

        " If file already exists make a temporary copy and show it to the user
        if filereadable(expand(g:vimrc_keyboard_remappings_path))
            call win_gotoid(source_layout_winid)
            exec 'vnew '
            set filetype=vim
            set buftype=nowrite " this buffer will not be saved
            set textwidth=88
            set nowrap
            silent exec '0read ' . g:vimrc_keyboard_remappings_path
            normal gg0O
            normal 88i–
            exec "normal 0o" . "THIS IS A COPY OF THE OLD FILE, WHICH HAS ALREADY BEEN OVERWRITTEN WITH THE NEW MAPPINGS"
            normal 0o
            normal 88i–
            normal gg
            let was_overwritten = 1 " only existence (not value) is relevant
        endif


    " catch a ctrl-C interruption
    catch /^Vim:Interrupt$/
        call win_gotoid(target_layout_winid)
        bdelete
        call win_gotoid(source_layout_winid)
        bdelete
        call win_gotoid(info_winid)
        bdelete
        redraw!
        echo "The remapping operation has been interrupted. No mappings have been saved."
        return
    catch
        echo "An error occurred: " . v:exception
        echo "No mappings have been saved. You need to close any remaining temporary buffer manually."
        redraw!
        return
    endtry

    " only of there was no error save the result
    try
        " Save by overwriting any previous version
        call win_gotoid(source_layout_winid)
        " reset the buftype option, which prevents saving
        set buftype=
        silent exec 'write! ' . g:vimrc_keyboard_remappings_path
        redraw

        " Show a summary message in the info buffer
        call win_gotoid(info_winid)
        wincmd J
        set nowrap
        resize 14
        normal ggVGd

        " Print warning about bugs –––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
        call append(0, ["NOTE: THIS SCRIPT DOES NOT PROTECT AGAINST GENERATING MAPPINGS THAT WILL CONFLICT",
                    \ "WITH EACH OTHER, BREAK OTHER MAPPINGS, OR CAUSE OTHER UNWANTED BEHAVIOUR.",
                    \ "",
                    \ "Also note that 'langmap' is known to have many unstabilities/bugs (e.g. when remapped",
                    \ "characters are longer than one byte, or while replaying macros recorded with 'langmap'",
                    \ "enabled, etc.), while using 'map' works fine but is limited by the rules for recursive",
                    \ "mappings in Vim, the inability to swap two keys, etc.",
                    \ ""])
        " ––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

        call append(line('$'), ["A mappings file has been generated and is already saved in the correct location.", 
                    \ "It will be loaded automatically when vim starts. To start using it immediately:", 
                    \ "     :source " . g:vimrc_keyboard_remappings_path, 
                    \ "",
                    \ "You may change, add or remove any mapping manually, then close this buffer."])
        if exists('was_overwritten')
            resize +4
            call append(line('$'), ["",
                        \ "A previous mappings file was overwitten. Its contents are shown in the 'nowrite'",
                        \ "buffer on the right. If you close it they will be lost"])
        endif

        call win_gotoid(source_layout_winid)
        return
        redraw
        echo "Remapping operation completed successfully"
    catch
        echo "The mappings file was generated correctly, but an error occurred while saving: " . v:exception
    endtry

endfunc



function! s:standardizeKeyboardRemove()

    redraw
    if !exists('g:vimrc_keyboard_remappings_path')
        redraw
        echo "Error: 'g:vimrc_keyboard_remappings_path' is not defined"
        echo "It should contain the name for the configuration file generated by this function."
    endif
    if !filereadable(expand(g:vimrc_keyboard_remappings_path))
        redraw
        echo "Nothing to do: there is no keyboard standardization file."
    endif

    let answ = input("Do you really want to delete the keyboard standardization file? This operation is irreversible. [y/*]")
    if answ == 'y'
        " remove mappings
        set langmap=
        " delete the mappings file
        exec "!rm " . g:vimrc_keyboard_remappings_path
        redraw
        echo "All 'langmap' mappings have been cleared and the standardization file has been deleted."
    else
        redraw
        echo "Operation interrupted, remapping file was not deleted (you did not type 'y')"
    endif

endfunction


function! s:get_isok_schematic_target()

    if exists('g:standardize_keyboard_schematic')
        let schematic = g:standardize_keyboard_schematic
    else
        let schematic = s:default_schematic
    endif
    if exists('g:standardize_keyboard_target_list')
        let targets = g:standardize_keyboard_target_list
    else
        let targets = s:default_target_list
    endif
    " if targets is empty use all characters int he schematic
    if targets == []
        let targets = split(substitute(join(schematic, ''), '[ ─│┌┐└┘├┤┬┴]', '', 'g'), '\zs')
    endif

    " check for repeated characters in the schematic
    let all_chars_sorted = sort(split(substitute(join(schematic, ''), '[ ─│┌┐└┘├┤┬┴]', '', 'g'), '\zs'))
    let idx = 0
    let repeated_in_schematic = []
    while idx < len(all_chars_sorted) - 1
        if (all_chars_sorted[idx] == all_chars_sorted[idx + 1])
            call add(repeated_in_schematic, all_chars_sorted[idx])
        endif
        let idx += 1
    endwhile

    " check for characters in the target list that are not in the schematic
    let not_in_schematic = []
    for char in targets
        if (stridx(join(all_chars_sorted, ''), char) < 0)
            call add(not_in_schematic, char)
        endif
    endfor

    " return a list with 3 elements: consistency check, schematic, targets
    let ok = 1
    if repeated_in_schematic != []
        echo "Keyboard standardization error: the schematic variable `g:standardize_keyboard_schematic` contains repeated charactes (" . join(repeated_in_schematic, ' ') . ")"
        let ok = 0
    endif
    if not_in_schematic != []
        echo "Keyboard Standardization error: the targets variable `g:standardize_keyboard_target_list` contains chracters that are not in the schematic (" . join(not_in_schematic, ' ') . ")"
        let ok = 0
    endif
    return [ok, schematic, targets]

endfunction

